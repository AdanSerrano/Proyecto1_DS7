USE db_aa090b_ds7utp;

-- CREATE TABLE USER
DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS(  
    ID_USER int NOT NULL PRIMARY KEY AUTO_INCREMENT,
    USER_NAME VARCHAR(255),
    USER_FIRST_NAME VARCHAR(255),
    USER_LAST_NAME VARCHAR(255)
);

-- CREATE SP INSERT NEW USSER
DROP PROCEDURE IF EXISTS SP_USER_NEW;
CREATE PROCEDURE `SP_USER_NEW`(
    IN VAR_USER_NAME VARCHAR(255),
    IN VAR_USER_FIRST_NAME VARCHAR(255),
    IN VAR_USER_LAST_NAME VARCHAR(255)
)
BEGIN
    DECLARE USER_EXIST INT;
    SET @USER_EXIST = (SELECT COUNT(*) FROM USERS WHERE USER_NAME = UPPER(VAR_USER_NAME));
    IF(@USER_EXIST > 0) THEN
        SELECT 'USUARIO YA EXISTE EN LA BD' AS 'MESSAGE_STATE', '400' AS 'CODE_STATE';
    ELSE
        INSERT INTO USERS(USER_NAME, USER_FIRST_NAME, USER_LAST_NAME) VALUES (UPPER(VAR_USER_NAME), UPPER(VAR_USER_FIRST_NAME), UPPER(VAR_USER_LAST_NAME));
        SELECT 'USUARIO REGISTRADO' AS 'MESSAGE_STATE', '200' AS 'CODE_STATE';
    END IF;
END;

CALL SP_USER_NEW('DMaloney', 'david', 'maloney');

-- CREATE SP GET USERS

CREATE PROCEDURE `SP_USER`()
BEGIN
    SELECT ID_USER, USER_NAME, USER_FIRST_NAME, USER_LAST_NAME FROM USERS;
END;

CALL SP_USER();

-- CREAR TABLE Categorie

DROP TABLE IF EXISTS CATEGORIES;
CREATE TABLE CATEGORIES(
    ID_CATEGORIE INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    CAT_NAME VARCHAR(255),
    CAT_COLOR VARCHAR(15)
);

-- CREATE SP INSERT NEW CATEGORIE
DROP PROCEDURE IF EXISTS SP_CATEGORIE_NEW;
CREATE PROCEDURE `SP_CATEGORIE_NEW`(
    IN VAR_CAT_NAME VARCHAR(255),
    IN VAR_CAT_COLOR VARCHAR(15)
)
BEGIN
    DECLARE CAT_EXIST INT;
    SET @CAT_EXIST = (SELECT COUNT(*) FROM CATEGORIES WHERE CAT_NAME = UPPER(VAR_CAT_NAME));
    IF(@CAT_EXIST > 0) THEN
        SELECT 'CATEGORIA YA EXISTE EN LA BD' AS 'MESSAGE_STATE', '400' AS 'CODE_STATE';
    ELSE
        INSERT INTO CATEGORIES(CAT_NAME, CAT_COLOR) VALUES (UPPER(VAR_CAT_NAME), UPPER(VAR_CAT_COLOR));
        SELECT 'CATEGORIA REGISTRADA' AS 'MESSAGE_STATE', '200' AS 'CODE_STATE';
    END IF;
END;

CALL SP_CATEGORIE_NEW('CATEGORIA 2', 'Ff0000');

-- CREATE SP GET CATEGORIES
CREATE PROCEDURE `SP_CATEGORIE`()
BEGIN
    SELECT ID_CATEGORIE, CAT_NAME, CAT_COLOR FROM CATEGORIES;
END;

CALL SP_CATEGORIE();


-- CREATE TABLE PARAMETER

DROP TABLE IF EXISTS PARAMETERS;
CREATE TABLE PARAMETERS(
    ID_PARAMETER INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    PARA_NAME VARCHAR(255),
    PARA_CATEGORY VARCHAR(255)
);

INSERT INTO PARAMETERS(PARA_NAME, PARA_CATEGORY) VALUES ('POR HACER', 'ESTADOS DE TAREAS');
INSERT INTO PARAMETERS(PARA_NAME, PARA_CATEGORY) VALUES ('EN PROGRESO', 'ESTADOS DE TAREAS');
INSERT INTO PARAMETERS(PARA_NAME, PARA_CATEGORY) VALUES ('TERMINADA', 'ESTADOS DE TAREAS');

-- CREATE SP  GET PARAMETERS
CREATE PROCEDURE `SP_PARAMETER`(
    IN VAR_PARA_CATEGORY VARCHAR(255)
)
BEGIN
    SELECT ID_PARAMETER, PARA_NAME, PARA_CATEGORY FROM PARAMETERS WHERE PARA_CATEGORY = VAR_PARA_CATEGORY;
END;
-- CREATE TABLE TASK

DROP TABLE IF EXISTS TASKS;
CREATE TABLE TASKS(
    ID_TASK INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    TASK_NAME VARCHAR(255),
    TASK_DESCRIPTION TEXT,
    TASK_STATE ENUM('por hacer', 'en progreso', 'terminada') NOT NULL,
    TASK_DATE DATE NOT NULL,
    TASK_EDIT BOOLEAN NOT NULL,
    TASK_RESPONSABLE VARCHAR(255) NOT NULL,
    TASK_CATEGORIE_ID INT,
    TASK_USER_ID INT,
    FOREIGN KEY (TASK_CATEGORIE_ID) REFERENCES CATEGORIES(ID_CATEGORIE),
    FOREIGN KEY (TASK_USER_ID) REFERENCES USERS(ID_USER)
);